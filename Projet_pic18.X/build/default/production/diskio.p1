Version 4.0 HI-TECH Software Intermediate Code
"169 ./memoryCard.h
[; ;./memoryCard.h: 169:     _Bool memCard_initCard(void);
[v _memCard_initCard `(a ~T0 @X0 0 ef ]
"26 diskio.c
[; ;diskio.c: 26: DRESULT disk_readp (
[c E101 0 1 2 3 .. ]
[n E101 . RES_OK RES_ERROR RES_NOTRDY RES_PARERR  ]
"212 ./memoryCard.h
[; ;./memoryCard.h: 212:     _Bool memCard_readFromDisk(uint32_t sect, uint16_t offset, uint8_t* data, uint16_t nBytes);
[v _memCard_readFromDisk `(a ~T0 @X0 0 ef4`ul`us`*uc`us ]
"216
[; ;./memoryCard.h: 216:     _Bool memCard_prepareWrite(uint32_t sector);
[v _memCard_prepareWrite `(a ~T0 @X0 0 ef1`ul ]
"67 diskio.c
[; ;diskio.c: 67:             if (memCard_writeBlock() != CARD_NO_ERROR)
[c E168 0 1 2 3 4 5 6 7 8 9 .. ]
[n E168 . CARD_NO_ERROR CARD_SPI_TIMEOUT CARD_CRC_ERROR CARD_RESPONSE_ERROR CARD_ILLEGAL_CMD CARD_VOLTAGE_NOT_SUPPORTED CARD_PATTERN_ERROR CARD_WRITE_IN_PROGRESS CARD_WRITE_SIZE_ERROR CARD_NOT_INIT  ]
"223 ./memoryCard.h
[; ;./memoryCard.h: 223:     CommandError memCard_writeBlock(void);
[v _memCard_writeBlock `(E168 ~T0 @X0 0 ef ]
"220
[; ;./memoryCard.h: 220:     _Bool memCard_queueWrite(uint8_t* data, uint16_t dLen);
[v _memCard_queueWrite `(a ~T0 @X0 0 ef2`*uc`us ]
"12 diskio.c
[; ;diskio.c: 12: DSTATUS disk_initialize (void)
[v _disk_initialize `(uc ~T0 @X0 1 ef ]
"13
[; ;diskio.c: 13: {
{
[e :U _disk_initialize ]
[f ]
"14
[; ;diskio.c: 14:  if (memCard_initCard())
[e $ ! != -> ( _memCard_initCard ..  `i -> 0 `i 12  ]
"15
[; ;diskio.c: 15:         return 0x00;
[e ) -> -> 0 `i `uc ]
[e $UE 11  ]
[e :U 12 ]
"17
[; ;diskio.c: 17:  return 0x01;
[e ) -> -> 1 `i `uc ]
[e $UE 11  ]
"18
[; ;diskio.c: 18: }
[e :UE 11 ]
}
"26
[; ;diskio.c: 26: DRESULT disk_readp (
[v _disk_readp `(E101 ~T0 @X0 1 ef4`*uc`ul`ui`ui ]
"32
[; ;diskio.c: 32: {
{
[e :U _disk_readp ]
"27
[; ;diskio.c: 27:  BYTE* buff,
[v _buff `*uc ~T0 @X0 1 r1 ]
"28
[; ;diskio.c: 28:  DWORD sector,
[v _sector `ul ~T0 @X0 1 r2 ]
"29
[; ;diskio.c: 29:  UINT offset,
[v _offset `ui ~T0 @X0 1 r3 ]
"30
[; ;diskio.c: 30:  UINT count
[v _count `ui ~T0 @X0 1 r4 ]
"32
[; ;diskio.c: 32: {
[f ]
"33
[; ;diskio.c: 33:  if (!memCard_readFromDisk(sector, offset, buff, count))
[e $ ! ! != -> ( _memCard_readFromDisk (4 , , , _sector -> _offset `us _buff -> _count `us `i -> 0 `i 14  ]
"34
[; ;diskio.c: 34:     {
{
"35
[; ;diskio.c: 35:         return RES_ERROR;
[e ) . `E101 1 ]
[e $UE 13  ]
"36
[; ;diskio.c: 36:     }
}
[e :U 14 ]
"38
[; ;diskio.c: 38:  return RES_OK;
[e ) . `E101 0 ]
[e $UE 13  ]
"39
[; ;diskio.c: 39: }
[e :UE 13 ]
}
"47
[; ;diskio.c: 47: DRESULT disk_writep (
[v _disk_writep `(E101 ~T0 @X0 1 ef2`*uc`ul ]
"51
[; ;diskio.c: 51: {
{
[e :U _disk_writep ]
"48
[; ;diskio.c: 48:  BYTE* buff,
[v _buff `*uc ~T0 @X0 1 r1 ]
"49
[; ;diskio.c: 49:  DWORD sc
[v _sc `ul ~T0 @X0 1 r2 ]
"51
[; ;diskio.c: 51: {
[f ]
"52
[; ;diskio.c: 52:  DRESULT res = RES_OK;
[v _res `E101 ~T0 @X0 1 a ]
[e = _res . `E101 0 ]
"55
[; ;diskio.c: 55:  if (!buff) {
[e $ ! ! != _buff -> -> 0 `i `*uc 16  ]
{
"56
[; ;diskio.c: 56:   if (sc) {
[e $ ! != _sc -> -> -> 0 `i `l `ul 17  ]
{
"59
[; ;diskio.c: 59:             if (!memCard_prepareWrite(sc))
[e $ ! ! != -> ( _memCard_prepareWrite (1 _sc `i -> 0 `i 18  ]
"60
[; ;diskio.c: 60:             {
{
"61
[; ;diskio.c: 61:                 res = RES_NOTRDY;
[e = _res . `E101 2 ]
"62
[; ;diskio.c: 62:             }
}
[e :U 18 ]
"64
[; ;diskio.c: 64:   } else {
}
[e $U 19  ]
[e :U 17 ]
{
"67
[; ;diskio.c: 67:             if (memCard_writeBlock() != CARD_NO_ERROR)
[e $ ! != -> ( _memCard_writeBlock ..  `ui -> . `E168 0 `ui 20  ]
"68
[; ;diskio.c: 68:             {
{
"69
[; ;diskio.c: 69:                 res = RES_ERROR;
[e = _res . `E101 1 ]
"70
[; ;diskio.c: 70:             }
}
[e :U 20 ]
"71
[; ;diskio.c: 71:   }
}
[e :U 19 ]
"72
[; ;diskio.c: 72:  } else {
}
[e $U 21  ]
[e :U 16 ]
{
"75
[; ;diskio.c: 75:         if (!memCard_queueWrite(buff, sc))
[e $ ! ! != -> ( _memCard_queueWrite (2 , _buff -> _sc `us `i -> 0 `i 22  ]
"76
[; ;diskio.c: 76:         {
{
"77
[; ;diskio.c: 77:             res = RES_ERROR;
[e = _res . `E101 1 ]
"78
[; ;diskio.c: 78:         }
}
[e :U 22 ]
"80
[; ;diskio.c: 80:  }
}
[e :U 21 ]
"82
[; ;diskio.c: 82:  return res;
[e ) _res ]
[e $UE 15  ]
"83
[; ;diskio.c: 83: }
[e :UE 15 ]
}
